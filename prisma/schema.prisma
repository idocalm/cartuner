// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "mongodb"
    url      = env("DATABASE_URL")
}

model ClientUser {
  id    String @id @default(auto()) @map("_id") @db.ObjectId
  email String @unique
  name  String 
  password String
  avatar String @default("https://via.placeholder.com/150")
  createdAt DateTime @default(now())
  Vehicle Vehicle[]
  StoreOrder StoreOrder[]
}

model StoreOwnerUser {
  id    String @id @default(auto()) @map("_id") @db.ObjectId
  email String @unique
  password String
  createdAt DateTime @default(now())
  stores Store[]
  ownerAlerts OwnerAlert[]

  Bidding Bidding[]
}

model Review {
  id    String @id @default(auto()) @map("_id") @db.ObjectId
  title String
  description String
  stars Int
  storeId String @db.ObjectId
  createdAt DateTime @default(now())
  store Store @relation(fields: [storeId], references: [id])
}

model MechanicUser {
  id    String @id @default(auto()) @map("_id") @db.ObjectId
  name String
  email String @unique
  password String
  createdAt DateTime @default(now())
  stores MechanicsStores[]
}


model Store {
  id    String @id @default(auto()) @map("_id") @db.ObjectId
  name  String
  url   String
  image String @default("https://via.placeholder.com/150") 
  address String
  country String
  city String
  postalCode String
  phone String
  publicationStatus String @default("Pending for approval")
  createdAt DateTime @default(now())
  establishedAt DateTime
  ownerId String? @db.ObjectId 
  owner StoreOwnerUser? @relation(fields: [ownerId], references: [id])
  mechanics MechanicsStores[]
  stars Int @default(0)
  reviewCount Int @default(0)
  reviews Review[] 
  products Product[]
  orders StoresOrders[]
}

model MechanicsStores {
  id   String @id @default(auto()) @map("_id") @db.ObjectId
  storeId String @db.ObjectId
  mechanicId String @db.ObjectId
  store Store @relation(fields: [storeId], references: [id])
  owner MechanicUser @relation(fields: [mechanicId], references: [id])
}

model Vehicle {
  id    String @id @default(auto()) @map("_id") @db.ObjectId
  name  String
  brand String
  model String
  type  String
  year  Int
  plate String
  image String  @default("https://via.placeholder.com/150") 
  vin  String
  ownerId String @db.ObjectId
  owner ClientUser @relation(fields: [ownerId], references: [id])
  createdAt DateTime @default(now())
  Incident Incident[]
  notes String @default("")
}

enum BiddingStatus {
  INIT
  STARTED
  IN_PROGRESS
  FINISHED
  CANCELLED
  REJECTED
}

model Incident {
  id    String @id @default(auto()) @map("_id") @db.ObjectId
  description String
  date DateTime
  location String
  photos String[]
  hitbox Float[]
  vehicle Vehicle @relation(fields: [id], references: [id])
  vehicleId String @db.ObjectId
  status String @default("Pending")
  ownerId String @db.ObjectId
  createdAt DateTime @default(now())
  biddingStatus BiddingStatus @default(INIT)
  bid BiddingData? @relation(name: "IncidentBid")
  bidId String? @db.ObjectId
}

model BiddingData {
  id    String @id @default(auto()) @map("_id") @db.ObjectId
  type String @default("ALL") 
  createdAt DateTime @default(now())
  dueDate DateTime
  incidentId String @db.ObjectId @unique
  incident Incident  @relation(name: "IncidentBid", fields: [incidentId], references: [id])
  bids Bidding[] @relation
}

model Bidding {
  id    String @id @default(auto()) @map("_id") @db.ObjectId
  price Float
  description String
  isFlexible Boolean @default(false)
  createdAt DateTime @default(now())
  tunerId String @db.ObjectId
  tuner StoreOwnerUser @relation(fields: [tunerId], references: [id])
  biddingDataId String @db.ObjectId
  biddingData BiddingData @relation(fields: [biddingDataId], references: [id])
  status BiddingStatus @default(INIT)
  notes String @default("")
  incidentId String @db.ObjectId
}


model AdminUser {
  id    String @id @default(auto()) @map("_id") @db.ObjectId
  username String @unique
  password String
  createdAt DateTime @default(now())
}

model InviteToken { 
  id    String @id @default(auto()) @map("_id") @db.ObjectId
  expiresAt DateTime 
  storeId String @db.ObjectId
}

model Product {
  id    String @id @default(auto()) @map("_id") @db.ObjectId
  name  String
  price Float
  description String
  image String @default("https://via.placeholder.com/150")
  category String
  storeId String @db.ObjectId
  active Boolean @default(true)
  store Store @relation(fields: [storeId], references: [id])
  createdAt DateTime @default(now())
  orders OrdersProducts[]
}

model OrdersProducts {
  id   String @id @default(auto()) @map("_id") @db.ObjectId
  orderId String @db.ObjectId
  productId String @db.ObjectId
  product Product @relation(fields: [productId], references: [id])
  quantity Int
  order StoreOrder @relation(fields: [orderId], references: [id])
}

model StoresOrders {
  id   String @id @default(auto()) @map("_id") @db.ObjectId
  
  storeId String @db.ObjectId
  orderId String @db.ObjectId
  store Store @relation(fields: [storeId], references: [id])
  order StoreOrder @relation(fields: [orderId], references: [id])
}

enum OrderStatus {
  PLACED
  PROCESSED
  SHIPPED
  DELIVERED
  CANCELLED
}

model StoreOrder {
  id    String @id @default(auto()) @map("_id") @db.ObjectId
  storeId String @db.ObjectId
  customerId String @db.ObjectId
  customer ClientUser @relation(fields: [customerId], references: [id])
  products OrdersProducts[]
  total Float
  stores StoresOrders[]
  createdAt DateTime @default(now())
  status OrderStatus @default(PLACED)
  notes String @default("") 
}

model OwnerAlert {
  id    String @id @default(auto()) @map("_id") @db.ObjectId
  title String
  description String
  storeId String @db.ObjectId
  createdAt DateTime @default(now())
  owner StoreOwnerUser @relation(fields: [ownerId], references: [id])
  ownerId String @db.ObjectId
}

